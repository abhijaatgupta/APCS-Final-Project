public class FourLengthShip extends Ship {
	Coordinate c1;
	Coordinate c2;
	Coordinate c3;
	Coordinate c4;

	/**
	 * Constructor to initialize the Coordinate objects
	 * 
	 * @param c1
	 *            Coordinate object
	 * @param c2
	 *            Coordinate object
	 * @param c3
	 *            Coordinate object
	 * @param c4
	 *            Coordinate object
	 */
	public FourLengthShip(Coordinate c1, Coordinate c2, Coordinate c3, Coordinate c4) {
		this.c1 = c1;
		this.c2 = c2;
		this.c3 = c3;
		this.c4 = c4;
	}

	/**
	 * Boolean method to see if guessed coordinate hits a ship
	 * 
	 * @return true if hit, false if not
	 */
	@Override
	public boolean isDamaged() {
		if ((c1.isDamaged() || c2.isDamaged() || c3.isDamaged() || c4.isDamaged()) && (!isAlive())) {
			return true;
		} else {
			return false;
		}
	}

	/**
	 * Boolean method to check to see if a ship has been hit on all coordinates
	 * 
	 * @return true if all coordinates hit, false if not
	 */
	@Override
	public boolean isAlive() {
		if (c1.isDamaged() && c2.isDamaged() && c3.isDamaged() && c4.isDamaged()) {
			return true;
		} else {
			return false;
		}
	}

	/**
	 * Getter method for ship size
	 * 
	 * @return ship size
	 */
	public int getSize() {
		return 4;
	}

	/**
	 * Getter method for Coordinate object 1
	 * 
	 * @return Coordinate object 1
	 */
	public Coordinate getC1() {
		return c1;
	}

	/**
	 * Getter method for Coordinate object 2
	 * 
	 * @return Coordinate object 2
	 */
	public Coordinate getC2() {
		return c2;
	}

	/**
	 * Getter method for Coordinate object 3
	 * 
	 * @return Coordinate object 3
	 */
	public Coordinate getC3() {
		return c3;
	}

	/**
	 * Getter method for Coordinate object 4
	 * 
	 * @return Coordinate object 4
	 */
	public Coordinate getC4() {
		return c4;
	}
}
